#lang racket
(provide (all-defined-out))
(require eopl "ast.ss" "parse.ss" "env.ss")

;; eva-ast: ast? env? -> any/c
;; this function is used to evaluate the ast generated after the parse.
(define (eval-ast a env)
  (cases ast-datatype a
    [num-ast (datum) datum]
    [bool-ast (datum) datum]
    [id-ref-ast (id) (lookup-env env id)]
    [if-ast (cond-ast ast1 ast2)   ;; succ-ast---ast1 , fail-ast--ast2
            (let ([condition (eval-ast cond-ast env)])
              (cond
                [(eq? condition #t) (eval-ast ast1 env)]
                [(eq? condition #f) (eval-ast ast2 env)]
                [(error "Error:  problem in if-ast (condition must be of bool type)")]
              ))]
    [fn-ast (formals body) (closure formals body env)]
    [fix-ast (fbinds body)
             (let ([new-env (extended-fix-env (map fbind-fname fbinds) (map fbind-formals fbinds) (map fbind-body fbinds) env)])
               (eval-ast body new-env))]
    [app-ast (rator-ast rands-ast)
             (let ([rator (eval-ast rator-ast env)]
                   [rands (map (lambda (x) (eval-ast x env)) rands-ast)])
               (if (proc? rator) (apply-proc rator rands) (error "Error: in eval-ast: (error app-ast, rator is not a proc )"))
             )]
    [else (error "Error:  in eval-ast")]
  ))

;; apply-closure: formals? body? env? rands? ->any/c
;; this applies closure and evaluates body.
(define (apply-closure formals body env rands)
  (let ([new-env (extended-env formals rands env)])
    (eval-ast body new-env)))

;; apply-prim-proc op? rator? rands? ->any/c
;; this applies closure and evaluates value of the primitiev procedures.
(define (apply-prim-proc op rator rands)
  (let ([return-type (first rator)]
        [arg-types (second rator)])
    (cond
      [(or (arg-types rands) (andmap arg-types rands)) (apply op rands)]
      [(error "Error:  in apply-prim-proc: (incorrect type of arguments to primitive)")]
    )))

;; it initailises the intial environments and binds the meaning of primitive operators to it real meaning.
(define init-env
                      (extended-env '(* / + - sub1 add1 < > <= >= 0? = not)
                      (list
                         (primitive * (list number? (list-of number?)))   
                         (primitive / (list number? (list-of number?))) 
                         (primitive + (list number? (list-of number?)))
                         (primitive - (list number? (list-of number?)))
                         (primitive sub1 (list number? number?))
                         (primitive add1 (list number? number?))
                         (primitive < (list boolean? (list-of number?)))
                         (primitive > (list boolean? (list-of number?)))
                         (primitive <= (list boolean? (list-of number?)))
                         (primitive >= (list boolean? (list-of number?)))
                         (primitive zero? (list boolean? number?))
                         (primitive = (list boolean? (list-of number?)))
                         (primitive not (list boolean? boolean?))) 
                         (empty-env)
  ))

;;apply-proc : list? list? -> primitive? | closure?
;; returns primitive or closure?
(define (apply-proc rator rands)
  (cases proc rator
    [primitive (op signature) (apply-prim-proc op signature rands)]
    [closure (formals body env) (apply-closure formals body env rands)]
  ))

;;run: exp? env? -> value?
;; this is the driver program.
(define run   
  (lambda (exp  env)
  (eval-ast (parse exp) env)))

;(eval-ast (parse '(+ 5 8)) init-env)
;(eval-ast (parse '(if  (> 1 9) #t #f )) init-env)
;(eval-ast (parse '(if #f #t #f ))  (empty-env))
;(eval-ast (parse '(and #t #t #t 5)) (empty-env))
;(run '(+ 2 2 2))
;(run '(sub1 5))
;(run '(cond
       ;  [(=  1) #f]
 ;        [(> 2 1) #t]
  ;       [else (+ 1 1)]))
;(run '( (fn (x y) (+ x y)) 5 6))